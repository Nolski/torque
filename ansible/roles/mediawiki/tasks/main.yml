---

- name: Add php repository - Ubuntu
  become: true
  apt_repository:
    repo: ppa:ondrej/php
  when: ansible_distribution == 'Ubuntu'

- name: install prerequisites
  become: true
  # See https://www.mediawiki.org/wiki/Manual:Installation_requirements
  apt:
    name: "{{ item }}"
    #update_cache: yes # commented out for dev purposes
    state: present
  loop:
    - apache2
    - curl
    - git
    - php
    - php-apcu
    - php-cli
    - php-intl
    - php-mbstring
    - php-mysql
    - php-mysqli
    - php-xml
    - unzip

- name: Setup installation directory
  file:
    path: "{{ mediawiki_install_directory }}"
    state: directory

- name: Download MediaWiki
  get_url:
    url: https://releases.wikimedia.org/mediawiki/1.33/mediawiki-1.33.0.tar.gz
    dest: "{{ mediawiki_install_directory }}/mediawiki-1.33.0.tar.gz"
    checksum: sha256:8335a2d8740c5dd5919a480b74c3d8e19f23a68b396df48c2d77646272fdcd67

- name: Extract MediaWiki tarball
  unarchive:
    src: "{{ mediawiki_install_directory }}/mediawiki-1.33.0.tar.gz"
    dest: "{{ mediawiki_install_directory }}/"
    remote_src: yes
    creates: "{{ mediawiki_install_directory }}/mediawiki-1.33.0/"

- name: Enable PHP modules
  become: true
  shell: phpenmod {{ item }}
  loop:
    - mbstring
    - mysqli
    - xml

- name: Get Composer
  get_url:
    url: https://getcomposer.org/installer
    dest: "{{ mediawiki_install_directory }}/composer-setup.php"
    checksum: "sha384:a5c698ffe4b8e849a443b120cd5ba38043260d5c4023dbf93e1558871f1f07f58274fc6f4c93bcfd858c6bd0775cd8d1"

- name: Make wiki bin directory
  file:
    path: "{{ mediawiki_install_directory }}/bin"
    state: directory

- name: Install Composer locally
  shell: php {{ mediawiki_install_directory }}/composer-setup.php --install-dir={{ mediawiki_install_directory }}/bin --filename=composer

- name: Remove Composer setup script
  file:
    path: "{{ mediawiki_install_directory }}/composer-setup.php"
    state: absent

- name: Install Composer globally
  become: true
  shell: mv {{ mediawiki_install_directory }}/bin/composer /usr/local/bin/composer

- name: Install MW with Composer
  command: composer install --no-dev
  args:
    chdir: "{{ mediawiki_install_directory }}/mediawiki-1.33.0"

- name: Install EmbedVideo
  unarchive:
    src: thirdparty/extensions/EmbedVideo-v2.8.0.zip
    dest: "{{ mediawiki_install_directory }}/mediawiki-1.33.0/extensions/"

- name: Patch EmbedVideo
  patch:
    src: EmbedVideoIframeTitle.patch
    basedir: "{{ mediawiki_install_directory }}/mediawiki-1.33.0/extensions/EmbedVideo-v2.8.0/"

- name: Install PluggableAuth
  unarchive:
    src: thirdparty/extensions/PluggableAuth-REL1_33-a69f626.tar.gz
    dest: "{{ mediawiki_install_directory }}/mediawiki-1.33.0/extensions/"

- name: Install SimpleSAML extension
  unarchive:
    src: thirdparty/extensions/SimpleSAMLphp-REL1_33-7d91f27.tar.gz
    dest: "{{ mediawiki_install_directory }}/mediawiki-1.33.0/extensions/"

- name: Install Collection
  unarchive:
    src: thirdparty/extensions/Collection-REL1_33-8566dd1.tar.gz
    dest: "{{ mediawiki_install_directory }}/mediawiki-1.33.0/extensions/"

- name: Install PickSome
  copy:
    src: "{{ playbook_dir }}/../extensions/PickSome"
    dest: "{{ mediawiki_install_directory }}/mediawiki-1.33.0/extensions/"

- name: Install SimpleFavorites
  copy:
    src: "{{ playbook_dir }}/../extensions/SimpleFavorites"
    dest: "{{ mediawiki_install_directory }}/mediawiki-1.33.0/extensions/"

- name: Install TeamComments
  copy:
    src: "{{ playbook_dir }}/../extensions/TeamComments"
    dest: "{{ mediawiki_install_directory }}/mediawiki-1.33.0/extensions/"

- name: Create Wiki
  command: "php {{ mediawiki_install_directory }}/mediawiki-1.33.0/maintenance/install.php --dbtype=mysql --dbserver=localhost --dbuser=wikiuser --dbpass=\"{{ db_password }}\" --dbname=lfc --scriptpath=\"/lfc\" --lang=en --pass=\"{{ mediawiki_admin_password }}\" \"lfc\" \"admin\""
  args:
    creates: "{{ mediawiki_install_directory }}/mediawiki-1.33.0/LocalSettings.php"

- name: Enable EmbedVideo
  lineinfile:
    path: "{{ mediawiki_install_directory }}/mediawiki-1.33.0/LocalSettings.php"
    line: "wfLoadExtension('EmbedVideo-v2.8.0');"

- name: Enable PluggableAuth
  blockinfile:
    path: "{{ mediawiki_install_directory }}/mediawiki-1.33.0/LocalSettings.php"
    marker: "## {mark} ANSIBLE PLUGABLE AUTH CONFIG"
    block: |
      wfLoadExtension( 'PluggableAuth' );
      $wgPluggableAuth_EnableAutoLogin = true;
      $wgPluggableAuth_EnableLocalLogin = true;
      # We only potentially set to false if coming in from the web
      if(array_key_exists('REQUEST_URI', $_SERVER)) {
        $wgPluggableAuth_EnableLocalLogin = (substr($_SERVER['REQUEST_URI'], 0, 13) == "/lfc/api.php");
      }

      # We hijack at the top level if someone who knows what they are doing
      # puts in a get arg before the first redirect even happens
      if(array_key_exists('locallogin', $_GET)) {
        setcookie('locallogin', $_GET['locallogin'], time() + 3600, '/');
        $wgPluggableAuth_EnableLocalLogin = $_GET['locallogin'] == "on";
      }
      if(array_key_exists('locallogin', $_COOKIE)) {
        $wgPluggableAuth_EnableLocalLogin = $_COOKIE['locallogin'] == "on";
      }
      $wgPluggableAuth_EnableLocalProperties = false;
      $wgPluggableAuth_ButtonLabel = "Log In With Okta";
      $wgInvalidUsernameCharacters = "";

- name: Enable SimpleSAMLphp extension
  blockinfile:
    path: "{{ mediawiki_install_directory }}/mediawiki-1.33.0/LocalSettings.php"
    marker: "## {mark} ANSIBLE SIMPLE SAML PHP CONFIG"
    block: |
      wfLoadExtension( 'SimpleSAMLphp' );
      $wgSimpleSAMLphp_InstallDir = '{{ simplesaml_install_directory }}/simplesamlphp-1.17.6';
      $wgSimpleSAMLphp_AuthSourceId = '{{ simplesaml_okta_metadata_name }}';
      $wgSimpleSAMLphp_RealNameAttribute = ['firstName', 'lastName'];
      $wgSimpleSAMLphp_EmailAttribute = 'email';
      $wgSimpleSAMLphp_UsernameAttribute = 'email';
      $wgSimpleSAMLphp_AttributeProcessorFactories = [
        "MediaWiki\\Extension\\SimpleSAMLphp\\AttributeProcessor\\SyncAllGroups::factory"
      ];

- name: Enable PickSome
  blockinfile:
    path: "{{ mediawiki_install_directory }}/mediawiki-1.33.0/LocalSettings.php"
    marker: "## {mark} ANSIBLE PICKSOME CONFIG"
    block: |
      # While this next line should be taken care of in extenions, and indeed
      # it is, because this extension is loaded via wfLoadExtension, and because
      # Collection is loaded the old way, the sidebar before output is called
      # preferring Collection, placing it higher on the siderbar than PickSome.
      #
      # This was requested to be changed, and the most straightforward way is
      # to add it to the hook directly in LocalSettings
      $wgHooks['SidebarBeforeOutput'][] = 'PickSomeHooks::onSidebarBeforeOutput';
      wfLoadExtension('PickSome');
      # This may not be performant and require caching if number of users/page hits
      # becomes large.
      $wgPickSomePage = function($title) {
        $eligibleWildCardsTitle = Title::newFromText("Eligible Wild Cards");
        if($eligibleWildCardsTitle->exists()) {
          $page = new WikiPage($eligibleWildCardsTitle);
          $valid_pages = [];
          preg_match_all("/\\[\\[([^\\]]*)\\]\\]/", $page->getContent()->getText(), $valid_pages);
          foreach($valid_pages[1] as $valid_page) {
            if($title->equals(Title::newFromText($valid_page))) {
              return true;
            }
          }
          return false;
        } else {
          return false;
        }
      };

      $picksomeOverrideMessage = [
        "picksome-all" => "Everyone's Wild Cards",
        "picksome-title" => "Wild Cards",
        "picksome-choices" => "Wild Card Choices",
        "picksome-my-picks" => "My Wild Cards",
        "picksome-unpick" => "Deselect",
        "picksome-pick" => "Select this page",
        "picksome-no-picks" => "No Wild Cards",
        "picksome-current" => "Current Page",
        "picksome-view-all" => "View Everyone's Wild Cards",
        "picksome-global-list" => "Global Wild Card List",
        "picksome-remove-below" => "To select the current page, remove one below",
        "picksome-stop" => "Stop Selecting",
        "picksome-close-window" => "Close Window",
        "picksome-start" => "Start Selecting",
      ];
      $wgHooks['MessagesPreLoad'][] = function($title, &$message, $code) {
        global $picksomeOverrideMessage;
        if(array_key_exists(strtolower($title), $picksomeOverrideMessage)) {
          $message = $picksomeOverrideMessage[strtolower($title)];
        }
      };

# This actually needs to be installed after PickSome (above), because
# we want the picksome sidebar to be loaded before the Collection sidebar
# because of how mediawiki decides order of portlet.
- name: Enable Collection
  blockinfile:
    path: "{{ mediawiki_install_directory }}/mediawiki-1.33.0/LocalSettings.php"
    marker: "## {mark} ANSIBLE COLLECTION CONFIG"
    block: |
      require_once "$IP/extensions/Collection/Collection.php";
      $wgCollectionMWServeCredentials = "{{ mediawiki_mwlib_username }}:{{ mediawiki_mwlib_password }}";
      $wgCollectionMWServeURL = "http://127.0.0.1:8899";
      $wgCollectionMaxArticles = 250;
      $wgEnableApi = true;
      $wgCollectionFormats = array( 'rl' => 'PDF',);
      $wgCollectionPortletFormats = [];
      $wgCollectionDisableDownloadSection = false;

- name: Enable SimpleFavorites
  lineinfile:
    path: "{{ mediawiki_install_directory }}/mediawiki-1.33.0/LocalSettings.php"
    line: "wfLoadExtension('SimpleFavorites');"

- name: Enable TeamComments
  blockinfile:
    path: "{{ mediawiki_install_directory }}/mediawiki-1.33.0/LocalSettings.php"
    marker: "## {mark} ANSIBLE TEAMCOMMENTS CONFIG"
    block: |
      wfLoadExtension('TeamComments');
      $wgTeamCommentsCheatSheetLocation = "Wiki_Markup_Cheat_Sheet";

- name: Enable Uploading
  blockinfile:
    path: "{{ mediawiki_install_directory }}/mediawiki-1.33.0/LocalSettings.php"
    marker: "## {mark} UPLOAD CONFIG"
    block: |
      $wgEnableUploads = true;
      $wgFileExtensions = array_merge($wgFileExtensions, array('doc', 'docx', 'html', 'pdf', 'xlsx'));
      $wgFileBlacklist = array();
      $wgMimeTypeBlacklist = array();
      $wgStrictFileExtensions = false;
      $wgTrustedMediaFormats = array('application/zip', 'text/html');
      $wgVerifyMimeType = false;
      $wgAllowJavaUploads = true;
      $wgCheckFileExtensions = false;
      $wgGroupPermissions['bot']['edit'] = true;
      $wgGroupPermissions['bot']['upload'] = true;
      $wgGroupPermissions['autoconfirmed']['reupload'] = true;

- name: Set TOC depth
  lineinfile:
    path: "{{ mediawiki_install_directory }}/mediawiki-1.33.0/LocalSettings.php"
    line: $wgMaxTocLevel = 2;

- name: Disable Collection Warning 1
  replace:
    path: "{{ mediawiki_install_directory }}/mediawiki-1.33.0/extensions/Collection/Collection.body.php"
    regexp: '^(\t.*MessageBoxHelper::renderWarningBoxes.*)$'
    replace: '#\1'

- name: Disable Collection Warning 2
  replace:
    path: "{{ mediawiki_install_directory }}/mediawiki-1.33.0/extensions/Collection/templates/CollectionPageTemplate.php"
    regexp: '^(\t.*MessageBoxHelper::renderWarningBoxes.*)$'
    replace: '#\1'

- name: Remove Collection Book Text
  replace:
    path: "{{ mediawiki_install_directory }}/mediawiki-1.33.0/extensions/Collection/i18n/en.json"
    regexp: '\t"coll-book_creator_intro": "<big>With the ''''book creator'''' you can create a book containing wiki pages of your choice. You can export the book in different formats \(for example PDF or ODF\) or order a printed copy.</big>",'
    replace: '\t"coll-book_creator_intro": "<big>With the ''''book creator'''' you can create a book containing wiki pages of your choice. You can export the book in different formats (for example PDF or ODF).</big>",'

- name: Disable MediaWiki Cache
  # When the cache is enabled, on AWS, with the default setting,
  # the following createAndPromote.php command fails due to cache timeout.
  # The reason isn't clear, but for now, this will fix it.
  lineinfile:
    path: "{{ mediawiki_install_directory }}/mediawiki-1.33.0/LocalSettings.php"
    line: $wgMainCacheType = CACHE_NONE;

- name: Create mwlib user
  command: "php {{ mediawiki_install_directory }}/mediawiki-1.33.0/maintenance/createAndPromote.php --force --dbuser=wikiuser --dbpass=\"{{ db_password }}\" \"{{ mediawiki_mwlib_username }}\" \"{{ mediawiki_mwlib_password }}\""

- name: Create csv2wiki user
  command: "php {{ mediawiki_install_directory }}/mediawiki-1.33.0/maintenance/createAndPromote.php --bot --force --dbuser=wikiuser --dbpass=\"{{ db_password }}\" \"{{ mediawiki_csv2wiki_username }}\" \"{{ mediawiki_csv2wiki_password }}\""

- name: Set Group Permissions
  blockinfile:
    marker: "## {mark} ANSIBLE GROUP PERMISSIONS CONFIG"
    path: "{{ mediawiki_install_directory }}/mediawiki-1.33.0/LocalSettings.php"
    block: |
      $wgGroupPermissions['Board Members']['read'] = true;
      $wgGroupPermissions['Pseudo Board Members']['read'] = true;
      $wgGroupPermissions['Board Members']['picksome'] = true;
      $wgGroupPermissions['Pseudo Board Members']['picksome'] = true;
      foreach($wgGroupPermissions['sysop'] as $key => $value) {
        $wgGroupPermissions['LFC Torque'][$key] = $value;
      }

      $wgGroupPermissions['bot']['protect'] = true;
      $wgRestrictionLevels[] = 'generated';
      $wgGroupPermissions['bot']['generated'] = true;

      # Permissions that we want sysops/admins to have that
      # but not for staff go here
      $wgGroupPermissions['sysop']['generated'] = true;
      $wgGroupPermissions['sysop']['picksome'] = true;
      $wgGroupPermissions['sysop']['picksome-admin'] = true;
      foreach($wgGroupPermissions['sysop'] as $key => $value) {
        $wgGroupPermissions['LFC Torque Admin'][$key] = $value;
      }

- name: Transfer LFC Logo
  copy:
    src: LeverForChange_Logo.png
    dest: "{{ mediawiki_install_directory }}/mediawiki-1.33.0/resources/assets/LeverForChange_Logo.png"

- name: Install LFC Logo
  lineinfile:
    path: "{{ mediawiki_install_directory }}/mediawiki-1.33.0/LocalSettings.php"
    regexp: ^$wgLogo = .*
    line: $wgLogo = "$wgResourceBasePath/resources/assets/LeverForChange_Logo.png";

- name: Transfer board group css
  copy:
    src: Group-board.css
    dest: "{{ mediawiki_install_directory }}/Group-board.css"

- name: Install board group css
  raw: "php {{ mediawiki_install_directory }}/mediawiki-1.33.0/maintenance/edit.php -b MediaWiki:Group-{{ item }}.css < {{ mediawiki_install_directory }}/Group-board.css"
  loop:
    - Board_Members_Torque
    - Board_Members

- name: Remove board group css
  file:
    path: "{{ mediawiki_install_directory }}/Group-board.css"
    state: absent

- name: Transfer wiki cheat sheet
  copy:
    src: Wiki_Markup_Cheat_Sheet
    dest: "{{ mediawiki_install_directory }}/Wiki_Markup_Cheat_Sheet"

- name: Install wiki cheat sheet
  raw: "php {{ mediawiki_install_directory }}/mediawiki-1.33.0/maintenance/edit.php -b Wiki_Markup_Cheat_Sheet < {{ mediawiki_install_directory }}/Wiki_Markup_Cheat_Sheet"

- name: Transfer wiki cheat sheet
  file:
    path: "{{ mediawiki_install_directory }}/Wiki_Markup_Cheat_Sheet"
    state: absent

# This should come near the end to make sure that all the database updates
# for the extensions get run after the rest of the system is set up.
- name: Run mediawiki updates
  command: "php {{ mediawiki_install_directory }}/mediawiki-1.33.0/maintenance/update.php"

# Handle Apache changes
- name: Symlink to webserver directory
  become: true
  file:
    state: link
    owner: www-data
    group: www-data
    src: "{{ mediawiki_install_directory }}/mediawiki-1.33.0"
    path: /var/www/html/lfc

- name: Set permissions on attachments directory
  become: true
  file:
    path: "/var/www/html/lfc/images/"
    owner: www-data
    group: www-data


- name: Restart Apache
  become: true
  service:
    name: apache2
    state: restarted

